#pragma once

#include <capnp/schema.h>

{{include_pod}}
{{import_converters}}

{{converter_function_lines}}
{{namespace_start}}

// from

template <typename CT>
auto _fromCapnp(CT v) {
    if constexpr (std::is_same_v<CT, ::capnp::Void>) {
        return std::monostate();
    } else if constexpr (std::is_arithmetic_v<CT>) {
        return v;
    } else if constexpr (std::is_same_v<CT, ::capnp::Text::Reader>) {
        return static_cast<std::string>(v);
    } else if constexpr (std::is_same_v<CT, ::capnp::Data::Reader>) {
        auto bytes = v.asBytes();
        auto begin = reinterpret_cast<const podgen::Data::value_type*>(bytes.begin());
        return podgen::Data(begin, begin + bytes.size());
    } else if constexpr (podgen::is_iterable<CT>) {
        using CE = decltype(std::declval<CT>().begin().operator*());
        using E = decltype(_fromCapnp(std::declval<CE>()));
        std::vector<E> out;
        out.reserve(v.size());
        for (auto&& ce : v) {
            out.push_back(_fromCapnp(ce));
        }
        return out;
    } else {
        return podFromCapnp(v);
    }
}

template <typename T, typename CL>
auto _fromCapnpList(CL list) {
    using CE = decltype(std::declval<CL>().begin().operator*());
    using E = typename std::decay<decltype(std::declval<T>().begin().operator*())>::type;

    T out;

    for (auto&& ce : list) {
        if constexpr (std::is_same_v<CE, ::capnp::Text::Reader>) {
            out.insert(out.end(), _fromCapnp(ce));
        } else if constexpr (std::is_same_v<CE, ::capnp::Data::Reader>) {
            out.insert(out.end(), _fromCapnp(ce));
        } else if constexpr (podgen::is_iterable<CE>) {
            out.insert(out.end(), _fromCapnpList<E>(ce));
        } else if constexpr (podgen::is_pair<E>) {
            out.insert(out.end(), std::make_pair(_fromCapnp(ce.getKey()), _fromCapnp(ce.getValue())));
        } else {
            out.insert(out.end(), _fromCapnp(ce));
        }
    }

    return out;
}


// to

template <typename T>
concept is_text = std::is_same_v<std::remove_cv_t<T>, std::string>;

template <typename T>
concept is_data = std::is_same_v<std::remove_cv_t<T>, podgen::Data>;

template <typename T>
concept is_pass_by_ref = is_text<T> || is_data<T>;

template <typename T>
concept is_not_pass_by_ref = !is_pass_by_ref<T>;

template <typename T>
auto _toCapnp(T v) requires is_not_pass_by_ref<T>
{
  if constexpr (std::is_arithmetic_v<T>) {
    return v;
  } else if constexpr (std::is_enum_v<T>) {
    return podToCapnp(v);
  } else {
    return;
  }
}

template <typename T>
auto _toCapnp(T &v) requires is_pass_by_ref<T>
{
  if constexpr (is_text<T>) {
    return ::capnp::Text::Reader(v);
  } else if constexpr (is_data<T>) {
    return ::capnp::Data::Reader(reinterpret_cast<const uint8_t*>(v.data()), v.size());
  } else {
    return;
  }
}

template<typename T>
concept is_void_type = std::is_void_v<T>;

template<typename T>
concept is_not_void_type = !is_void_type<T>;

template <typename T>
concept is_buildable = requires(T t)
{
  { _toCapnp<T>(t) } -> is_not_void_type;
};

template <typename B, typename T>
void _toCapnpList(B builder, const T& container) {
    using E = typename std::decay<decltype(std::declval<T>().begin().operator*())>::type;

    if (builder.size() != container.size()) {
        throw std::invalid_argument("capnp list builder must be initialized to source vector size");
    }

    ::capnp::uint i = 0;
    for (const auto& e : container) {
        if constexpr (is_buildable<E>) {
            builder.set(i, _toCapnp(e));
        } else if constexpr (podgen::is_pair<E>) {
            builder[i].setKey(_toCapnp(e.first));
            builder[i].setValue(_toCapnp(e.second));
        } else if constexpr (podgen::is_iterable<E>) {
            auto b = builder.init(i, e.size());
            _toCapnpList(b, e);
        } else {
            podToCapnp(builder[i], e);
        }

        i++;
    }
}

{{namespace_end}}
